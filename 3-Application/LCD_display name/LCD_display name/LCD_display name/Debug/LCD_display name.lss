
LCD_display name.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000238  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000267  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e89  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000689  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e1  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001da  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000264  00000000  00000000  00001dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.LCD_voidSendcommand 00000054  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_voidSenddata 00000054  00000126  00000126  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_VoidInit 00000066  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000026  0000017a  0000017a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  000001be  000001be  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  000001c0  000001c0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  000001c2  000001c2  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  000001a0  000001a0  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  000001ba  000001ba  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
   8:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
   c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  10:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  14:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  18:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  1c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  20:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  24:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  28:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  2c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  30:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  34:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  38:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  3c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  44:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  48:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  4c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
  50:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000001b6 <__bad_interrupt>:
 1b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.LCD_voidSendcommand:

000000d2 <LCD_voidSendcommand>:


void LCD_voidSendcommand(u8 command)
{
	//send High nipple "data"
	Data_port = (Data_port & 0x0f)|(command & 0xf0);
  d2:	9b b3       	in	r25, 0x1b	; 27
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	92 2b       	or	r25, r18
  dc:	9b bb       	out	0x1b, r25	; 27
	//set RS 0 (Register select)
	CLEAR_BIT(control_port,LCD_RS);
  de:	98 b3       	in	r25, 0x18	; 24
  e0:	9d 7f       	andi	r25, 0xFD	; 253
  e2:	98 bb       	out	0x18, r25	; 24
	//set RW 0 (Read/write)
	CLEAR_BIT(control_port,LCD_RW);
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	9b 7f       	andi	r25, 0xFB	; 251
  e8:	98 bb       	out	0x18, r25	; 24
	//Enable High
	SET_BIT(control_port,LCD_E);
  ea:	98 b3       	in	r25, 0x18	; 24
  ec:	98 60       	ori	r25, 0x08	; 8
  ee:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	00 00       	nop
	//Delay 1Us
	_delay_us(1);
	//Enable LOW
	CLEAR_BIT(control_port,LCD_E);
  f2:	98 b3       	in	r25, 0x18	; 24
  f4:	97 7f       	andi	r25, 0xF7	; 247
  f6:	98 bb       	out	0x18, r25	; 24
	
	//Send Low Nipple
	//send data
	Data_port = (Data_port & 0x0f)|(command << 4);
  f8:	2b b3       	in	r18, 0x1b	; 27
  fa:	30 e1       	ldi	r19, 0x10	; 16
  fc:	83 9f       	mul	r24, r19
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	92 2f       	mov	r25, r18
 104:	9f 70       	andi	r25, 0x0F	; 15
 106:	89 2b       	or	r24, r25
 108:	8b bb       	out	0x1b, r24	; 27
	//set RS 0 (Register select)
	CLEAR_BIT(control_port,LCD_RS);
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	88 bb       	out	0x18, r24	; 24
	//set RW 0 (Read/write)
	CLEAR_BIT(control_port,LCD_RW);
 110:	88 b3       	in	r24, 0x18	; 24
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	88 bb       	out	0x18, r24	; 24
	//Enable High
	SET_BIT(control_port,LCD_E);
 116:	88 b3       	in	r24, 0x18	; 24
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	00 00       	nop
	//Delay 1Us
	_delay_us(1);
	//Enable LOW
	CLEAR_BIT(control_port,LCD_E);
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	87 7f       	andi	r24, 0xF7	; 247
 122:	88 bb       	out	0x18, r24	; 24
 124:	08 95       	ret

Disassembly of section .text.LCD_voidSenddata:

00000126 <LCD_voidSenddata>:
}
void LCD_voidSenddata(u8 data)
{
	//send High nipple "data"
	Data_port = (Data_port & 0x0f)|(data & 0xf0);
 126:	9b b3       	in	r25, 0x1b	; 27
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	28 2f       	mov	r18, r24
 12c:	20 7f       	andi	r18, 0xF0	; 240
 12e:	92 2b       	or	r25, r18
 130:	9b bb       	out	0x1b, r25	; 27
	//set RS 1 (Register select)
	SET_BIT(control_port,LCD_RS);
 132:	98 b3       	in	r25, 0x18	; 24
 134:	92 60       	ori	r25, 0x02	; 2
 136:	98 bb       	out	0x18, r25	; 24
	//set RW 0 (Read/write)
	CLEAR_BIT(control_port,LCD_RW);
 138:	98 b3       	in	r25, 0x18	; 24
 13a:	9b 7f       	andi	r25, 0xFB	; 251
 13c:	98 bb       	out	0x18, r25	; 24
	//Enable High
	SET_BIT(control_port,LCD_E);
 13e:	98 b3       	in	r25, 0x18	; 24
 140:	98 60       	ori	r25, 0x08	; 8
 142:	98 bb       	out	0x18, r25	; 24
 144:	00 00       	nop
	//Delay 1Us
	_delay_us(1);
	//Enable LOW
	CLEAR_BIT(control_port,LCD_E);
 146:	98 b3       	in	r25, 0x18	; 24
 148:	97 7f       	andi	r25, 0xF7	; 247
 14a:	98 bb       	out	0x18, r25	; 24
	//Send Low Nipple
	//send data
	Data_port = (Data_port & 0x0f)|(data << 4);
 14c:	2b b3       	in	r18, 0x1b	; 27
 14e:	30 e1       	ldi	r19, 0x10	; 16
 150:	83 9f       	mul	r24, r19
 152:	c0 01       	movw	r24, r0
 154:	11 24       	eor	r1, r1
 156:	92 2f       	mov	r25, r18
 158:	9f 70       	andi	r25, 0x0F	; 15
 15a:	89 2b       	or	r24, r25
 15c:	8b bb       	out	0x1b, r24	; 27
	//set RS 1 (Register select)
	SET_BIT(control_port,LCD_RS);
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	82 60       	ori	r24, 0x02	; 2
 162:	88 bb       	out	0x18, r24	; 24
	//set RW 0 (Read/write)
	CLEAR_BIT(control_port,LCD_RW);
 164:	88 b3       	in	r24, 0x18	; 24
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	88 bb       	out	0x18, r24	; 24
	//Enable High
	SET_BIT(control_port,LCD_E);
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	88 bb       	out	0x18, r24	; 24
 170:	00 00       	nop
	//Delay 1Us
	_delay_us(1);
	//Enable LOW
	CLEAR_BIT(control_port,LCD_E);
 172:	88 b3       	in	r24, 0x18	; 24
 174:	87 7f       	andi	r24, 0xF7	; 247
 176:	88 bb       	out	0x18, r24	; 24
 178:	08 95       	ret

Disassembly of section .text.LCD_VoidInit:

0000006c <LCD_VoidInit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	97 e2       	ldi	r25, 0x27	; 39
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <LCD_VoidInit+0x4>
  74:	00 c0       	rjmp	.+0      	; 0x76 <LCD_VoidInit+0xa>
  76:	00 00       	nop
}
void LCD_VoidInit(void)
{
	_delay_ms(40);
	LCD_voidSendcommand(0x28);//Function set
  78:	88 e2       	ldi	r24, 0x28	; 40
  7a:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_voidSendcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	9d e0       	ldi	r25, 0x0D	; 13
  80:	9a 95       	dec	r25
  82:	f1 f7       	brne	.-4      	; 0x80 <LCD_VoidInit+0x14>
  84:	00 00       	nop
	_delay_us(40);
	LCD_voidSendcommand(0x02);//return home
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_voidSendcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	83 ef       	ldi	r24, 0xF3	; 243
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <LCD_VoidInit+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <LCD_VoidInit+0x2a>
  96:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendcommand(0x06);//Entry mode
  98:	86 e0       	ldi	r24, 0x06	; 6
  9a:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_voidSendcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	9d e0       	ldi	r25, 0x0D	; 13
  a0:	9a 95       	dec	r25
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_VoidInit+0x34>
  a4:	00 00       	nop
	_delay_us(40); 
	LCD_voidSendcommand(0x0f);//display ON
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_voidSendcommand>
	LCD_voidSendcommand(0x14);//shift cursor right
  ac:	84 e1       	ldi	r24, 0x14	; 20
  ae:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_voidSendcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	97 e2       	ldi	r25, 0x27	; 39
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_VoidInit+0x4a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_VoidInit+0x50>
  bc:	00 00       	nop
	_delay_ms(40);
	LCD_voidSendcommand(0x01);//clear
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_voidSendcommand>
  c4:	83 ef       	ldi	r24, 0xF3	; 243
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_VoidInit+0x5c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_VoidInit+0x62>
  ce:	00 00       	nop
  d0:	08 95       	ret

Disassembly of section .text.main:

0000017a <main>:
#include "std_types.h"
#include "LCD_driver.h"
#include <avr/delay.h>
int main(void)
{
    DDRA = 0xff;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b00001111;
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	87 bb       	out	0x17, r24	; 23
	LCD_VoidInit();
 182:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
	LCD_voidSenddata('h');
 186:	88 e6       	ldi	r24, 0x68	; 104
 188:	0e 94 93 00 	call	0x126	; 0x126 <LCD_voidSenddata>
	LCD_voidSenddata('o');
 18c:	8f e6       	ldi	r24, 0x6F	; 111
 18e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_voidSenddata>
	LCD_voidSenddata('d');
 192:	84 e6       	ldi	r24, 0x64	; 100
 194:	0e 94 93 00 	call	0x126	; 0x126 <LCD_voidSenddata>
	LCD_voidSenddata('a');
 198:	81 e6       	ldi	r24, 0x61	; 97
 19a:	0e 94 93 00 	call	0x126	; 0x126 <LCD_voidSenddata>
 19e:	ff cf       	rjmp	.-2      	; 0x19e <main+0x24>

Disassembly of section .text.__dummy_fini:

000001be <_fini>:
 1be:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001c0 <__funcs_on_exit>:
 1c0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001c2 <__simulator_exit>:
 1c2:	08 95       	ret

Disassembly of section .text.exit:

000001a0 <exit>:
 1a0:	ec 01       	movw	r28, r24
 1a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__funcs_on_exit>
 1a6:	0e 94 df 00 	call	0x1be	; 0x1be <_fini>
 1aa:	ce 01       	movw	r24, r28
 1ac:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <__simulator_exit>
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Exit>

Disassembly of section .text._Exit:

000001ba <_Exit>:
 1ba:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
